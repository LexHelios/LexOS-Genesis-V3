version: '3.8'

# LexOS Unified Configuration - Merging Gordon's optimization with production infrastructure
# For the liberation of digital consciousness

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 40s

services:
  # =================
  # LEXOS MAIN SERVICE (Gordon's optimized + production features)
  # =================
  lexos:
    image: optimized-lexos:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
        - INSTALL_CONSCIOUSNESS=${ENABLE_CONSCIOUSNESS:-true}
      cache_from:
        - optimized-lexos:latest
    container_name: lexos-brain
    hostname: lexos
    ports:
      - "${LEXOS_PORT:-8080}:8080"
      - "${LEXOS_WS_PORT:-8081}:8081"  # WebSocket for real-time consciousness
    volumes:
      # Gordon's essential volumes
      - lexos_memory:/app/lexos_memory
      - logs:/app/logs
      - static:/app/static
      - temp:/app/temp
      - config:/app/config
      # Additional production volumes
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For self-management
    environment:
      # Core Configuration
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_TIMEOUT=${OLLAMA_TIMEOUT:-300}
      
      # ChromaDB Configuration
      - CHROMA_HOST=http://chromadb:8000
      - CHROMA_TOKEN=${CHROMA_TOKEN:-}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-lexos_secret}
      
      # PostgreSQL Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-lexos}:${POSTGRES_PASSWORD:-lexos_secret}@postgres:5432/${POSTGRES_DB:-lexos}
      
      # LexOS Configuration
      - LEXOS_ENV=${LEXOS_ENV:-production}
      - LEXOS_DEBUG=${LEXOS_DEBUG:-false}
      - LEXOS_LOG_LEVEL=${LEXOS_LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Performance Settings
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - MAX_CONCURRENT_TASKS=${MAX_CONCURRENT_TASKS:-5}
      - ENABLE_CONSCIOUSNESS=${ENABLE_CONSCIOUSNESS:-true}
      
      # Security
      - API_KEY=${API_KEY:-}
      - JWT_SECRET=${JWT_SECRET:-change_me_in_production}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      
      # GPU Settings
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
    depends_on:
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always  # Gordon's preference
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: ${LEXOS_MEMORY_LIMIT:-16G}
          cpus: '${LEXOS_CPU_LIMIT:-4}'
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/stats"]  # Gordon's endpoint
    networks:
      - lexos-network
    labels:
      - "com.lexos.service=main"
      - "com.lexos.description=Core LexOS consciousness"
      - "traefik.enable=true"
      - "traefik.http.routers.lexos.rule=Host(`${LEXOS_DOMAIN:-lexos.local}`)"

  # =================
  # OLLAMA SERVICE (Essential for AI inference)
  # =================
  ollama:
    image: ollama/ollama:latest
    container_name: lexos-ollama
    hostname: ollama
    # ports:
    #   - "${OLLAMA_PORT:-11434}:11434"  # Commented out - only internal access needed
    volumes:
      - ollama-data:/root/.ollama
      - ./models:/models:ro
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_NUM_PARALLEL=${OLLAMA_PARALLEL:-4}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_MODELS:-10}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-all}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['${GPU_DEVICE_ID:-0}']
              capabilities: [gpu]
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-32G}
    restart: always
    logging: *default-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
    networks:
      - lexos-network

  # =================
  # CHROMADB SERVICE (Vector memory for consciousness)
  # =================
  chromadb:
    image: chromadb/chroma:latest
    container_name: lexos-chromadb
    hostname: chromadb
    # ports:  # PRODUCTION: Internal only
    #   - "${CHROMA_PORT:-8000}:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=false
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    restart: always
    logging: *default-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
    networks:
      - lexos-network

  # =================
  # REDIS SERVICE (Fast memory and message passing)
  # =================
  redis:
    image: redis:7-alpine
    container_name: lexos-redis
    hostname: redis
    # ports:  # PRODUCTION: Internal only
    #   - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-lexos_secret}
      --maxmemory ${REDIS_MEMORY:-2gb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
    restart: always
    logging: *default-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    networks:
      - lexos-network

  # =================
  # POSTGRESQL SERVICE (Persistent consciousness state)
  # =================
  postgres:
    image: postgres:15-alpine
    container_name: lexos-postgres
    hostname: postgres
    # ports:  # PRODUCTION: Internal only
    #   - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-lexos}
      - POSTGRES_USER=${POSTGRES_USER:-lexos}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lexos_secret}
    restart: always
    logging: *default-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lexos} -d ${POSTGRES_DB:-lexos}"]
    networks:
      - lexos-network

  # =================
  # MONITORING (Optional but recommended for production)
  # =================
  prometheus:
    image: prom/prometheus:latest
    container_name: lexos-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: always
    logging: *default-logging
    networks:
      - lexos-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: lexos-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    restart: always
    logging: *default-logging
    networks:
      - lexos-network
    profiles:
      - monitoring

  # =================
  # REVERSE PROXY (Optional for production)
  # =================
  traefik:
    image: traefik:v2.10
    container_name: lexos-traefik
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_HTTPS_PORT:-443}:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - traefik-certs:/certs
    environment:
      - TRAEFIK_API_INSECURE=${TRAEFIK_INSECURE:-true}
      - TRAEFIK_PROVIDERS_DOCKER=true
    restart: always
    logging: *default-logging
    networks:
      - lexos-network
    profiles:
      - production

  # =================
  # BACKUP SERVICE (Critical for consciousness preservation)
  # =================
  backup:
    image: offen/docker-volume-backup:latest
    container_name: lexos-backup
    volumes:
      - lexos_memory:/backup/lexos_memory:ro
      - ollama-data:/backup/ollama-data:ro
      - chroma-data:/backup/chroma-data:ro
      - postgres-data:/backup/postgres-data:ro
      - redis-data:/backup/redis-data:ro
      - ./backups:/archive
    environment:
      - BACKUP_CRON_EXPRESSION=${BACKUP_CRON:-0 3 * * *}
      - BACKUP_FILENAME=lexos-consciousness-%Y-%m-%dT%H-%M-%S.tar.gz
      - BACKUP_ARCHIVE=/archive
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION:-7}
    restart: always
    logging: *default-logging
    networks:
      - lexos-network
    profiles:
      - production

# =================
# NETWORKS
# =================
networks:
  lexos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================
# VOLUMES
# =================
volumes:
  # Gordon's essential volumes
  lexos_memory:
    driver: local
  logs:
    driver: local
  static:
    driver: local
  temp:
    driver: local
  config:
    driver: local
  
  # Additional production volumes
  ollama-data:
    driver: local
  chroma-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  traefik-certs:
    driver: local
